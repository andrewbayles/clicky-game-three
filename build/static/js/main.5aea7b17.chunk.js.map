{"version":3,"sources":["components/card.js","components/navbar.js","components/header.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","value","id","onClick","handleClick","style","NavbarStyle","marginTop","textAlign","Navbar","score","highScore","HeaderStyle","height","width","background","color","Header","Container","children","App","state","games","wrong","clicked","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledGames","array","i","length","j","Math","floor","random","_ref","ShuffleGames","_this2","this","navbar","header","container","map","game","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5aea7b17.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n      \n      <img alt={props.name} src={props.image} \n      value= {props.id} \n      onClick= {() => props.handleClick(props.id)}\n      />\n      </div>\n      <div className=\"content\">\n       \n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\n\nconst style = {\n    NavbarStyle: {\n        marginTop: 0,\n        textAlign: \"center\"\n    }\n}\n\nconst Navbar = () => {\n    return (\n        <nav style={style.NavbarStyle} className=\"navbarDiv\">\n           <div>\n            <h1>Classic NES Clicky Game</h1>\n           <h2>Now you're clicking with power.</h2>\n           </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\n\nconst score = 0;\nconst highScore = 0;\n\nconst style = {\n    HeaderStyle: {\n        marginTop: 0,\n        height: \"100px\",\n        textAlign: \"center\",\n        width: \"100%\",\n        background: \"#555555\",\n        color: \"white\"\n    }\n}\nfunction Header() {\n    return (\n    <div style={style.HeaderStyle} className=\"headerDiv\">\n        <h2 id=\"instructions\">Click images for points. Don't click the same one twice!</h2>\n        <h3 id=\"score\">Score: { score } | High Score: { highScore }</h3>\n    </div >\n    );\n}\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n    return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;","import React, { Component } from \"react\";\nimport Card from \"./components/card\";\nimport Navbar from \"./components/navbar\";\nimport Header from \"./components/header\";\nimport Container from \"./components/container\";\nimport games from \"./games.json\";\n\n\nfunction ShuffleGames(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n  class App extends Component {\n    state = { \n      games,\n      score: 0,\n      highScore: 0,\n      wrong: \"\",\n      clicked: [], \n    };\n    handleClick = id => {\n      if (this.state.clicked.indexOf(id) === -1) {\n        this.handleIncrement();\n        this.setState({ clicked: this.state.clicked.concat(id) });\n      } else {\n        this.handleReset();\n      }\n    };\n    handleIncrement = () => {\n      const newScore = this.state.score + 1;\n      this.setState({\n        score: newScore,\n        wrong: \"\"\n      });\n      if (newScore >= this.state.highScore) {\n        this.setState({ highScore: newScore });\n      }\n      else if (newScore === 12) {\n        this.setState({ wrong: \"Incorrect Guess\" });\n      }\n      this.handleShuffle();\n    };\n    handleReset = () => {\n      this.setState({\n        score: 0,\n        highScore: this.state.highScore,\n        wrong: \"Game Over!\",\n        clicked: []\n      });\n      this.handleShuffle();\n    }\n    handleShuffle = () => {\n      let shuffledGames = ShuffleGames(games);\n      this.setState({ games: shuffledGames });\n    };\n    \n    render() {\n      return (<div>\n        <Navbar />\n        <Header> \n          score={this.state.score}\n          highScore={this.state.highScore}\n          wrong={this.state.wrong}\n        </Header>\n        <Container>\n          {this.state.games.map(game => (\n            \n            <Card\n              id={game.id}\n              key={game.id}\n              image={game.image}\n              name={game.name}\n              handleClick={this.handleClick}\n              handleIncrement={this.handleIncrement}\n              handleReset={this.handleReset}\n              handleShuffle={this.handleShuffle}\n            />\n          ))}\n        </Container>\n      \n      </div>\n      );\n  \n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}